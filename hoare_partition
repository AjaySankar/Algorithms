#include <iostream>
/*Adding modified partition algorithm 
1. The below partition algorithm takes the middle element as the pivot of the array which prevents the worst case
complexity in case of sorted arrays.
2. To reduce the recursion depth, recur first for the smaller half of the array, and use a tail call to recurse into the other.
3. Insertion sort works better for small subarrays. Insertion sort can be used for invocations on such small arrays.
   For example, library implementation of qsort uses insertion sort below size 7.

void FindPivot(int *arr,int n,int low,int high){
    int pivot_index=((n%2)==0)?((n/2)-1):n/2;
    int pivot=arr[pivot_index];
    while(1){
        while(arr[low]<pivot)
            low++;
        while(arr[high]>pivot)
            high--;
        if(low>=high)
            return high;
        swap(&arr[low],&arr[high]);
    }
}
low is 0
high is n-1
n is the size of array
*/

using namespace std;
void swap(int *a,int *b){
    int temp=*a;
    *a=*b;
    *b=temp;
}
int hoare_partition(int *arr,int low,int high){
    int pivot=arr[low];
    int i=low-1;
    int j=high+1;
    while(1){
        do{
            i++;
        }while(arr[i]<pivot);
        do{
            j--;
        }while(arr[j]>pivot);
        if(i>=j)
            return j;
        swap(&arr[i],&arr[j]);
    }
}
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = hoare_partition(arr, low, high);
        quickSort(arr, low, pi);
        quickSort(arr, pi + 1, high);
    }
}
 
void printArray(int arr[], int n)
{
    for (int i=0; i < n; i++)
        cout << arr[i] << " ";
}
int main() {
    int arr[] = {8, 7, 10, 9, 1, 5};
    int n = sizeof(arr)/sizeof(arr[0]);
    quickSort(arr, 0, n-1);
    printArray(arr, n);
	return 0;
}
